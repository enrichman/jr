package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"github.com/actgardner/gogen-avro/v10/generator"
)

func main() {
	if len(os.Args) < 4 {
		log.Fatal("too few arguments provided: [path] [avro-filename] [template-id]")
	}

	path := os.Args[1]
	avroFilename := os.Args[2]
	templateID := os.Args[3]

	path, err := filepath.Abs(path)
	if err != nil {
		log.Fatal(err)
	}

	avroPath := filepath.Join(path, avroFilename)
	avroSchema := loadAvroSchema(avroPath)

	generateInitFile(path, templateID, avroSchema.Name)
}

type AvroSchema struct {
	Name string
}

func loadAvroSchema(path string) AvroSchema {
	avroFile, err := os.Open(path)
	if err != nil {
		log.Fatal(err)
	}

	var avroSchema AvroSchema
	err = json.NewDecoder(avroFile).Decode(&avroSchema)
	if err != nil {
		log.Fatal(err)
	}

	return avroSchema
}

func generateInitFile(path, templateID, typeName string) {
	template := `// Autogenerated code. DO NOT EDIT.
package types

import "github.com/ugol/jr/types/registry"

func init() {
	registry.Register("%s", &%s{})
}
`
	content := fmt.Sprintf(template, templateID, typeName)

	initFilename := filepath.Join(path, generator.ToSnake(typeName)+"_init.go")
	initFile, err := os.OpenFile(initFilename, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		log.Fatal(err)
	}
	defer initFile.Close()

	_, err = initFile.WriteString(content)
	if err != nil {
		log.Fatal(err)
	}
}
